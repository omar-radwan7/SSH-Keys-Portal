HPC SSH Key Portal — 
Software Requirements 
Specification (SRS)
Owner: Ahmed Abd El‑Hameed HPC Team Lead)
Version: 1.0
Date: 02 Sep 2025
1. Purpose
Define a secure, user‑friendly portal for managing SSH keys used to access 
HPC systems. The portal centralizes key lifecycle (import, generate, rotate, 
expire, revoke), enforces policy (algorithms, lengths, TTL, comments, options), 
applies keys to managed hosts, and provides complete auditability.
1.1 Goals
Single source of truth for user → keys → access.
Directory‑backed login only; all key features are independent of the 
directory.
Rapid, deterministic application of keys to managed hosts.
Clear audits, notifications, and admin controls.
1.2 Non‑Goals
Long‑term storage/escrow of private keys.
Coupling key features to AD/FreeIPA groups or attributes.
2. Scope
In scope: directory‑based portal login; public‑key intake; client‑side and 
server‑side key generation; policy enforcement; applying keys to managed 
hosts; auditing and notifications; admin policy control.
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
1
Out of scope (this release): non‑SSH credentials; terminal/console; 
external approval workflows.
3. Definitions
Managed Host: Any system whose usersʼ a u t h o r i z e d _ k e y s  are maintained by 
the portal.
Key Origin: i m p o r t  (pasted/uploaded), c l i e n t _ g e n  (generated on user device), 
s y s t e m _ g e n  (generated by portal on request).
Policy: Rules governing allowed algorithms/lengths, TTL, max keys per 
user, comment format, and permitted a u t h o r i z e d _ k e y s  options.
4. Stakeholders & Roles
User: Manages own keys; views application status; rotates/revokes.
Admin: Manages policies, managed hosts, emergency revoke, audits.
Auditor (read‑only): Searches and exports audit logs.
Portal roles are managed locally: u s e r , a d m i n , a u d i t o r .
5. System Overview
High‑level flow: User signs in via directory → manages keys → system 
validates/enforces policy and persists → system renders desired state for 
managed hosts → keys are applied atomically → status recorded → audit 
logged → notifications sent as applicable.
Components (logical):
 Web UI (users/admins)
 Application API (business logic, policy, audit)
 Data Store (users, keys, policies, hosts, deployments, audits)
 Apply Service (renders desired state and writes to hosts)
 Identity Integration AD/FreeIPA for login only)
 Observability (metrics, logs, health)
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
2
6. Detailed Requirements
6.1 Authentication (Portal Login Only)
FR‑AUTH‑1 Authenticate users against AD or FreeIPA using a standard web 
flow.
FR‑AUTH‑2 Map directory username to a local portal user record and role.
FR‑AUTH‑3 If the directory account is disabled, login fails and existing 
sessions are invalidated.
FR‑AUTH‑4 Roles/permissions are maintained locally; no reliance on 
groups/claims for features.
6.2 Key Import
FR‑IMP‑1 Paste/upload public key (string or . p u b ).
FR‑IMP‑2 Validate syntax and algorithm; compute SHA‑256 fingerprint; 
derive bit length.
FR‑IMP‑3 Reject duplicate fingerprints across the portal.
FR‑IMP‑4 Enforce policy: allowed algorithms and minimum lengths; max 
keys per user; required comment format; optional TTL entry bounded by 
policy.
FR‑IMP‑5 Show a preview (algorithm, length, fingerprint, normalized 
comment) prior to save.
FR‑IMP‑6 On save, create an audit record and queue apply to managed 
hosts associated with the user account(s).
6.3 Client‑Side Key Generation (Preferred)
FR‑CLGEN‑1 Wizard to select algorithm and length within policy bounds; 
optional passphrase.
FR‑CLGEN‑2 Generate key pair on the userʼs device; the private key never 
leaves the device.
FR‑CLGEN‑3 Enroll only the public key after preview; audit creation.
6.4 System‑Side Key Generation (On Request)
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
3
FR‑SYSGEN‑1 User requests portal to generate a pair by specifying 
algorithm and length.
FR‑SYSGEN‑2 Private key is stored encrypted while pending pickup.
FR‑SYSGEN‑3 Provide single‑use, time‑limited download link 
(configurable, e.g.,  10 minutes).
FR‑SYSGEN‑4 On success or timeout, irreversibly purge private key.
FR‑SYSGEN‑5 Public key enrolled automatically; audit generation and 
pickup (time, requester, IP, UA.
FR‑SYSGEN‑6 Prominent warning about one‑time download and 
passphrase best practices.
6.5 Key Catalog & Policy Engine
FR‑POL‑1 Persist per key: algorithm, bit length, comment, fingerprint, 
origin, status (a c t i v e | d e p r e c a t e d | r e v o k e d | e x p i r e d ), TTL.
FR‑POL‑2 Enforce algorithm allowlist and length minima (e.g., allow e d 2 5 5 1 9 ; 
allow r s a  with min length).
FR‑POL‑3 Enforce max keys per user; default TTL; schedule expiry 
reminders (e.g., 30/14/7 days).
FR‑POL‑4 Normalize and validate comment.
FR‑POL‑5 Support a u t h o r i z e d _ k e y s  options per key (allowlist), such as 
f r o m = C I D R , n o - a g e n t - f o r w a r d i n g , n o - p t y , r e s t r i c t , c o m m a n d =  (approval if configured).
6.6 Apply to Managed Hosts
FR‑APPLY‑1 Render desired a u t h o r i z e d _ k e y s  per user account on target hosts.
FR‑APPLY‑2 Perform atomic writes: temp file → f s y n c  → move/replace; set 
permissions (dir 700, file 600.
FR‑APPLY‑3 Restore security labels where applicable; do not alter 
ownership.
FR‑APPLY‑4 Record deployment status per host/account (success/failure, 
checksum, generation, timestamps).
FR‑APPLY‑5 Show last apply status to the user for their account(s); admins 
can re‑apply on demand.
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
4
6.7 User Self‑Service
View keys (algorithm, length, fingerprint, status, expiry).
Import/generate keys; revoke keys.
Rotate keys: create successor; mark old as d e p r e c a t e d ; remove on schedule 
or upon user confirmation after successful login with the new key.
See apply status for own account(s).
6.8 Administration
Manage portal roles (u s e r , a d m i n , a u d i t o r ).
Configure policies (algorithms, lengths, TTL, max keys/user, comment 
format, options allowlist).
Manage managed hosts enrollment (hostnames and mapping to user 
accounts).
Trigger manual re‑apply per user/host.
Execute emergency revoke (global fingerprint blocklist) and force 
immediate apply.
Search/export audit logs CSV/JSON.
6.9 Audit & Notifications
Audit: Append‑only; includes actor, action, entity, ids, timestamp, source IP, 
diffs (when applicable), fingerprints.
Notifications: Key expiry reminders, system‑gen pickup reminders, 
emergency revoke digests. Channels are pluggable.
6.10 Error Handling & UX
Specific, human‑readable errors for validation failures (malformed key, 
unsupported algorithm, weak length, duplicate, exceeded max, invalid 
comment).
Apply errors surfaced with a friendly summary and technical detail for 
admins.
For expired/used system‑gen links, show a guided retry.
6.11 Rate Limiting & Abuse Controls
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
5
Per‑user rate limits on imports/generation.
Lockout/backoff on repeated failed pickups or suspicious activity.
Alert on unusual spikes in apply or revoke operations.
6.12 Localization & Accessibility
English/Arabic with RTL; WCAG 2.1 AA; keyboard‑accessible forms; clear 
success/failure states.
7. API Overview (Outline)
Base / a p i / v 1 
G E T  / m e / k e y s  — list user keys
P O S T  / m e / k e y s  — import public key {  p u b l i c K e y ,  c o m m e n t ? ,  e x p i r e s A t ?   
P O S T  / m e / k e y s / g e n e r a t e  — client‑side assist (policy publish/enroll public key 
only)
P O S T  / m e / k e y s / r e q u e s t s  — create server‑side generation request {  a l g o r i t h m ,  l e n g t h  } 
P O S T  / m e / k e y s / r e q u e s t s / { i d } : p i c k u p  — one‑time private‑key download
D E L E T E  / m e / k e y s / { k e y I d }  — revoke key
P O S T  / m e / k e y s / { k e y I d } : r o t a t e  — rotate key
P U T  / a d m i n / p o l i c i e s / s s h  — set algorithms, lengths, TTL, max/user, comment, 
options allowlist
P O S T  / a d m i n / r e a p p l y  — re‑apply for a user/host
P O S T  / a d m i n / r e v o k e  — emergency blocklist {  f i n g e r p r i n t s :  [ ]  } 
G E T  / a d m i n / a u d i t  — query/export audit records
8. Data Model (Conceptual)
User(id, external_id, username, email, display_name, role, status, 
created_at)
SSHKey(id, user_id, public_key, algorithm, bit_length, comment, 
fingerprint_sha256, origin, expires_at, status, created_at)
ManagedHost(id, hostname, address, os_family, last_seen_at)
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
6
Deployment(id, host_id, username, generation, status, checksum, 
started_at, finished_at, error)
Policy(id, rules_json, is_active)
AuditEvent(id, ts, actor_user_id, action, entity, entity_id, metadata_json)
Constraints: fingerprint unique globally; optional partial unique (user, 
comment); indexes on timestamps and host/user for fast audit and status 
queries.
9. Security Requirements
Directory‑backed authentication only; roles local.
Encrypted transport; strict cookie flags; CSRF protections where applicable.
Input validation/canonicalization; server‑side checks for all policy rules.
Private key handling (system‑gen): encrypted at rest while pending; 
single‑use token; short TTL; purge on pickup/timeout; excluded from 
logs/backups.
Atomic file writes; correct permissions/ownership; restore security labels 
where applicable.
Regular backups and restore drills for the data store (ephemeral private 
keys excluded).
10. Non‑Functional Requirements
Performance: apply latency target  3060s from key save to host write 
under nominal load.
Capacity: design for thousands of users and keys; linear scalability for 
apply operations.
Availability:  99.5% monthly (portal).
Observability: metrics for apply success rate, latency, pending operations, 
expiring keys; structured logs for audits.
Time: store timestamps in UTC; display using user locale/time zone (default 
Africa/Cairo).
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
7
11. Acceptance Criteria
 Directory login succeeds; disabling upstream account blocks login and 
invalidates session.
 Import modern key → preview → save → applied atomically to the relevant 
account(s) on managed hosts; SSH test passes.
 Client‑side generate: private key stays local; portal enrolls only public key.
 System‑side generate: one‑time link works; private key purged after 
pickup/expiry; audits show generation & pickup.
 Duplicate fingerprint rejected; disallowed algorithm/length rejected by 
policy.
 Rotation marks old key d e p r e c a t e d  and removes per policy/confirmation.
 Admin emergency revoke propagates promptly; access blocked as 
expected.
 Audit search/export returns correct records; notifications fire on schedule.
12. Migration
 Backup existing a u t h o r i z e d _ k e y s  for affected accounts.
 Import existing public keys as unverified; notify users to review/normalize 
comments and assign TTL.
 Switch to portal‑managed layout (replace file or include‑based directory).
 Validate apply; keep a rollback script to restore previous files if needed.
13. Future Enhancements
Hardware‑backed key attestation hints and policy nudges.
Batch/CLI tooling for bulk imports and rotations.
Optional approvals for forced commands or broad host scopes.
Pluggable distribution strategies (push, pull, repo) while preserving the 
same API/data model.
HPC SSH K e y P or t al  Sof t war e R equir ement s Specific ation SRS
8
