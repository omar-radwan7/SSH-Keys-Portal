{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: '/api/v1',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentication\n  async login(username, password) {\n    const allowTest = process.env.REACT_APP_ALLOW_TEST_LOGIN === 'true' && process.env.NODE_ENV !== 'production';\n    const path = allowTest ? '/auth/test-login' : '/auth/login';\n    const response = await this.api.post(path, {\n      username,\n      password\n    });\n    return response.data;\n  }\n  async logout() {\n    const response = await this.api.post('/auth/logout');\n    return response.data;\n  }\n\n  // SSH Keys\n  async getMyKeys() {\n    const response = await this.api.get('/me/keys');\n    return response.data;\n  }\n  async previewKey(publicKey) {\n    const response = await this.api.post('/me/keys/preview', {\n      publicKey\n    });\n    return response.data;\n  }\n  async importKey(publicKey, comment, expiresAt, authorizedKeysOptions) {\n    const response = await this.api.post('/me/keys', {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions\n    });\n    return response.data;\n  }\n  async generateKey(algorithm, bitLength) {\n    const response = await this.api.post('/me/keys/generate', {\n      algorithm,\n      bitLength\n    });\n    return response.data;\n  }\n  async revokeKey(keyId) {\n    const response = await this.api.delete(`/me/keys/${keyId}`);\n    return response.data;\n  }\n\n  // Admin - Policies\n  async getCurrentPolicy() {\n    const response = await this.api.get('/admin/policies/current');\n    return response.data;\n  }\n  async updatePolicy(policy) {\n    const response = await this.api.put('/admin/policies/ssh', policy);\n    return response.data;\n  }\n\n  // Admin - Managed Hosts\n  async getManagedHosts() {\n    const response = await this.api.get('/admin/hosts');\n    return response.data;\n  }\n  async addManagedHost(hostname, address, osFamily) {\n    const response = await this.api.post('/admin/hosts', {\n      hostname,\n      address,\n      os_family: osFamily\n    });\n    return response.data;\n  }\n\n  // Admin - Audit\n  async searchAuditEvents(filters) {\n    const response = await this.api.get('/admin/audit', {\n      params: filters\n    });\n    return response.data;\n  }\n  async exportAuditEvents(format, filters) {\n    const response = await this.api.get('/admin/audit/export', {\n      params: {\n        format,\n        ...filters\n      },\n      responseType: 'text'\n    });\n    return response.data;\n  }\n\n  // Admin - Apply\n  async applyAuthorizedKeys(username) {\n    const response = await this.api.post(`/admin/apply`, null, {\n      params: {\n        username\n      }\n    });\n    return response.data;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","login","username","password","allowTest","process","env","REACT_APP_ALLOW_TEST_LOGIN","NODE_ENV","path","post","data","logout","getMyKeys","get","previewKey","publicKey","importKey","comment","expiresAt","authorizedKeysOptions","generateKey","algorithm","bitLength","revokeKey","keyId","delete","getCurrentPolicy","updatePolicy","policy","put","getManagedHosts","addManagedHost","hostname","address","osFamily","os_family","searchAuditEvents","filters","params","exportAuditEvents","format","responseType","applyAuthorizedKeys"],"sources":["/home/oradwan/Desktop/SSH keys portal/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { ApiResponse, User, SSHKey, PolicyRules, AuditEvent, ManagedHost, KeyPreview } from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: '/api/v1',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async login(username: string, password: string): Promise<ApiResponse<{ token: string; user: User }>> {\n    const allowTest = (process.env.REACT_APP_ALLOW_TEST_LOGIN === 'true') && process.env.NODE_ENV !== 'production';\n    const path = allowTest ? '/auth/test-login' : '/auth/login';\n\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.post(path, {\n      username,\n      password,\n    });\n    return response.data;\n  }\n\n  async logout(): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.post('/auth/logout');\n    return response.data;\n  }\n\n  // SSH Keys\n  async getMyKeys(): Promise<ApiResponse<SSHKey[]>> {\n    const response: AxiosResponse<ApiResponse<SSHKey[]>> = await this.api.get('/me/keys');\n    return response.data;\n  }\n\n  async previewKey(publicKey: string): Promise<ApiResponse<KeyPreview>> {\n    const response: AxiosResponse<ApiResponse<KeyPreview>> = await this.api.post('/me/keys/preview', {\n      publicKey,\n    });\n    return response.data;\n  }\n\n  async importKey(\n    publicKey: string,\n    comment?: string,\n    expiresAt?: string,\n    authorizedKeysOptions?: string\n  ): Promise<ApiResponse<SSHKey>> {\n    const response: AxiosResponse<ApiResponse<SSHKey>> = await this.api.post('/me/keys', {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions,\n    });\n    return response.data;\n  }\n\n  async generateKey(algorithm: string, bitLength: number): Promise<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> {\n    const response: AxiosResponse<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> = await this.api.post('/me/keys/generate', {\n      algorithm,\n      bitLength,\n    });\n    return response.data;\n  }\n\n  async revokeKey(keyId: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.delete(`/me/keys/${keyId}`);\n    return response.data;\n  }\n\n  // Admin - Policies\n  async getCurrentPolicy(): Promise<ApiResponse<PolicyRules>> {\n    const response: AxiosResponse<ApiResponse<PolicyRules>> = await this.api.get('/admin/policies/current');\n    return response.data;\n  }\n\n  async updatePolicy(policy: PolicyRules): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put('/admin/policies/ssh', policy);\n    return response.data;\n  }\n\n  // Admin - Managed Hosts\n  async getManagedHosts(): Promise<ApiResponse<ManagedHost[]>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost[]>> = await this.api.get('/admin/hosts');\n    return response.data;\n  }\n\n  async addManagedHost(hostname: string, address: string, osFamily: string): Promise<ApiResponse<ManagedHost>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost>> = await this.api.post('/admin/hosts', {\n      hostname,\n      address,\n      os_family: osFamily,\n    });\n    return response.data;\n  }\n\n  // Admin - Audit\n  async searchAuditEvents(filters: {\n    startDate?: string;\n    endDate?: string;\n    action?: string;\n    entity?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<ApiResponse<AuditEvent[]>> {\n    const response: AxiosResponse<ApiResponse<AuditEvent[]>> = await this.api.get('/admin/audit', {\n      params: filters,\n    });\n    return response.data;\n  }\n\n  async exportAuditEvents(format: 'csv' | 'json', filters: {\n    startDate?: string;\n    endDate?: string;\n  }): Promise<string> {\n    const response: AxiosResponse<string> = await this.api.get('/admin/audit/export', {\n      params: { format, ...filters },\n      responseType: 'text',\n    });\n    return response.data;\n  }\n\n  // Admin - Apply\n  async applyAuthorizedKeys(username: string): Promise<ApiResponse<{ applied: any[]; checksum: string }>> {\n    const response: AxiosResponse<ApiResponse<{ applied: any[]; checksum: string }>> = await this.api.post(`/admin/apply`, null, {\n      params: { username },\n    });\n    return response.data;\n  }\n}\n\nexport default new ApiService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAwC,OAAO;AAG3D,MAAMC,UAAU,CAAC;EAGfC,WAAWA,CAAA,EAAG;IAAA,KAFNC,GAAG;IAGT,IAAI,CAACA,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;MACtBC,OAAO,EAAE,SAAS;MAClBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;MAClD;MACA,OAAOD,MAAM;IACf,CAAC,CAAC;;IAEF;IACA,IAAI,CAACR,GAAG,CAACK,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC/BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;MAAA,IAAAC,eAAA;MACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;QAClCN,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;QACrCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;QAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;MACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;IAC9B,CACF,CAAC;EACH;;EAEA;EACA,MAAMS,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAuD;IACnG,MAAMC,SAAS,GAAIC,OAAO,CAACC,GAAG,CAACC,0BAA0B,KAAK,MAAM,IAAKF,OAAO,CAACC,GAAG,CAACE,QAAQ,KAAK,YAAY;IAC9G,MAAMC,IAAI,GAAGL,SAAS,GAAG,kBAAkB,GAAG,aAAa;IAE3D,MAAMb,QAAmE,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAACD,IAAI,EAAE;MACpGP,QAAQ;MACRC;IACF,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMC,MAAMA,CAAA,EAAyB;IACnC,MAAMrB,QAAoC,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,cAAc,CAAC;IAChF,OAAOnB,QAAQ,CAACoB,IAAI;EACtB;;EAEA;EACA,MAAME,SAASA,CAAA,EAAmC;IAChD,MAAMtB,QAA8C,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoC,GAAG,CAAC,UAAU,CAAC;IACrF,OAAOvB,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMI,UAAUA,CAACC,SAAiB,EAAoC;IACpE,MAAMzB,QAAgD,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,kBAAkB,EAAE;MAC/FM;IACF,CAAC,CAAC;IACF,OAAOzB,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMM,SAASA,CACbD,SAAiB,EACjBE,OAAgB,EAChBC,SAAkB,EAClBC,qBAA8B,EACA;IAC9B,MAAM7B,QAA4C,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,UAAU,EAAE;MACnFM,SAAS;MACTE,OAAO;MACPC,SAAS;MACTC;IACF,CAAC,CAAC;IACF,OAAO7B,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMU,WAAWA,CAACC,SAAiB,EAAEC,SAAiB,EAAuF;IAC3I,MAAMhC,QAAmG,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,mBAAmB,EAAE;MACnJY,SAAS;MACTC;IACF,CAAC,CAAC;IACF,OAAOhC,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMa,SAASA,CAACC,KAAa,EAAwB;IACnD,MAAMlC,QAAoC,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgD,MAAM,CAAC,YAAYD,KAAK,EAAE,CAAC;IACvF,OAAOlC,QAAQ,CAACoB,IAAI;EACtB;;EAEA;EACA,MAAMgB,gBAAgBA,CAAA,EAAsC;IAC1D,MAAMpC,QAAiD,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoC,GAAG,CAAC,yBAAyB,CAAC;IACvG,OAAOvB,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMiB,YAAYA,CAACC,MAAmB,EAAwB;IAC5D,MAAMtC,QAAoC,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoD,GAAG,CAAC,qBAAqB,EAAED,MAAM,CAAC;IAC9F,OAAOtC,QAAQ,CAACoB,IAAI;EACtB;;EAEA;EACA,MAAMoB,eAAeA,CAAA,EAAwC;IAC3D,MAAMxC,QAAmD,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoC,GAAG,CAAC,cAAc,CAAC;IAC9F,OAAOvB,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAMqB,cAAcA,CAACC,QAAgB,EAAEC,OAAe,EAAEC,QAAgB,EAAqC;IAC3G,MAAM5C,QAAiD,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,cAAc,EAAE;MAC5FuB,QAAQ;MACRC,OAAO;MACPE,SAAS,EAAED;IACb,CAAC,CAAC;IACF,OAAO5C,QAAQ,CAACoB,IAAI;EACtB;;EAEA;EACA,MAAM0B,iBAAiBA,CAACC,OAOvB,EAAsC;IACrC,MAAM/C,QAAkD,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoC,GAAG,CAAC,cAAc,EAAE;MAC5FyB,MAAM,EAAED;IACV,CAAC,CAAC;IACF,OAAO/C,QAAQ,CAACoB,IAAI;EACtB;EAEA,MAAM6B,iBAAiBA,CAACC,MAAsB,EAAEH,OAG/C,EAAmB;IAClB,MAAM/C,QAA+B,GAAG,MAAM,IAAI,CAACb,GAAG,CAACoC,GAAG,CAAC,qBAAqB,EAAE;MAChFyB,MAAM,EAAE;QAAEE,MAAM;QAAE,GAAGH;MAAQ,CAAC;MAC9BI,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOnD,QAAQ,CAACoB,IAAI;EACtB;;EAEA;EACA,MAAMgC,mBAAmBA,CAACzC,QAAgB,EAA8D;IACtG,MAAMX,QAA0E,GAAG,MAAM,IAAI,CAACb,GAAG,CAACgC,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE;MAC3H6B,MAAM,EAAE;QAAErC;MAAS;IACrB,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACoB,IAAI;EACtB;AACF;AAEA,eAAe,IAAInC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}