{"ast":null,"code":"import _objectSpread from\"/home/oradwan/Desktop/SSH keys portal/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';class ApiService{constructor(){this.api=void 0;this.api=axios.create({baseURL:'/api/v1',timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\nthis.api.interceptors.request.use(config=>{const token=localStorage.getItem('auth_token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Response interceptor for error handling\nthis.api.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('auth_token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});}// Authentication\nasync login(username,password){const response=await this.api.post('/auth/login',{username,password});return response.data;}async logout(){const response=await this.api.post('/auth/logout');return response.data;}// SSH Keys\nasync getMyKeys(){const response=await this.api.get('/me/keys');return response.data;}async previewKey(publicKey){const response=await this.api.post('/me/keys/preview',{publicKey});return response.data;}async importKey(publicKey,comment,expiresAt,authorizedKeysOptions){const response=await this.api.post('/me/keys',{publicKey,comment,expiresAt,authorizedKeysOptions});return response.data;}async generateKey(algorithm,bitLength){const response=await this.api.post('/me/keys/generate',{algorithm,bitLength});return response.data;}async revokeKey(keyId){const response=await this.api.delete(\"/me/keys/\".concat(keyId));return response.data;}// Admin - Policies\nasync getCurrentPolicy(){const response=await this.api.get('/admin/policies/current');return response.data;}async updatePolicy(policy){const response=await this.api.put('/admin/policies/ssh',policy);return response.data;}// Admin - Managed Hosts\nasync getManagedHosts(){const response=await this.api.get('/admin/hosts');return response.data;}async addManagedHost(hostname,address,osFamily){const response=await this.api.post('/admin/hosts',{hostname,address,os_family:osFamily});return response.data;}// Admin - Audit\nasync searchAuditEvents(filters){const response=await this.api.get('/admin/audit',{params:filters});return response.data;}async exportAuditEvents(format,filters){const response=await this.api.get('/admin/audit/export',{params:_objectSpread({format},filters),responseType:'text'});return response.data;}}export default new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","login","username","password","post","data","logout","getMyKeys","get","previewKey","publicKey","importKey","comment","expiresAt","authorizedKeysOptions","generateKey","algorithm","bitLength","revokeKey","keyId","delete","getCurrentPolicy","updatePolicy","policy","put","getManagedHosts","addManagedHost","hostname","address","osFamily","os_family","searchAuditEvents","filters","params","exportAuditEvents","format","_objectSpread","responseType"],"sources":["/home/oradwan/Desktop/SSH keys portal/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { ApiResponse, User, SSHKey, PolicyRules, AuditEvent, ManagedHost, KeyPreview } from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: '/api/v1',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async login(username: string, password: string): Promise<ApiResponse<{ token: string; user: User }>> {\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.post('/auth/login', {\n      username,\n      password,\n    });\n    return response.data;\n  }\n\n  async logout(): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.post('/auth/logout');\n    return response.data;\n  }\n\n  // SSH Keys\n  async getMyKeys(): Promise<ApiResponse<SSHKey[]>> {\n    const response: AxiosResponse<ApiResponse<SSHKey[]>> = await this.api.get('/me/keys');\n    return response.data;\n  }\n\n  async previewKey(publicKey: string): Promise<ApiResponse<KeyPreview>> {\n    const response: AxiosResponse<ApiResponse<KeyPreview>> = await this.api.post('/me/keys/preview', {\n      publicKey,\n    });\n    return response.data;\n  }\n\n  async importKey(\n    publicKey: string,\n    comment?: string,\n    expiresAt?: string,\n    authorizedKeysOptions?: string\n  ): Promise<ApiResponse<SSHKey>> {\n    const response: AxiosResponse<ApiResponse<SSHKey>> = await this.api.post('/me/keys', {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions,\n    });\n    return response.data;\n  }\n\n  async generateKey(algorithm: string, bitLength: number): Promise<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> {\n    const response: AxiosResponse<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> = await this.api.post('/me/keys/generate', {\n      algorithm,\n      bitLength,\n    });\n    return response.data;\n  }\n\n  async revokeKey(keyId: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.delete(`/me/keys/${keyId}`);\n    return response.data;\n  }\n\n  // Admin - Policies\n  async getCurrentPolicy(): Promise<ApiResponse<PolicyRules>> {\n    const response: AxiosResponse<ApiResponse<PolicyRules>> = await this.api.get('/admin/policies/current');\n    return response.data;\n  }\n\n  async updatePolicy(policy: PolicyRules): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put('/admin/policies/ssh', policy);\n    return response.data;\n  }\n\n  // Admin - Managed Hosts\n  async getManagedHosts(): Promise<ApiResponse<ManagedHost[]>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost[]>> = await this.api.get('/admin/hosts');\n    return response.data;\n  }\n\n  async addManagedHost(hostname: string, address: string, osFamily: string): Promise<ApiResponse<ManagedHost>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost>> = await this.api.post('/admin/hosts', {\n      hostname,\n      address,\n      os_family: osFamily,\n    });\n    return response.data;\n  }\n\n  // Admin - Audit\n  async searchAuditEvents(filters: {\n    startDate?: string;\n    endDate?: string;\n    action?: string;\n    entity?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<ApiResponse<AuditEvent[]>> {\n    const response: AxiosResponse<ApiResponse<AuditEvent[]>> = await this.api.get('/admin/audit', {\n      params: filters,\n    });\n    return response.data;\n  }\n\n  async exportAuditEvents(format: 'csv' | 'json', filters: {\n    startDate?: string;\n    endDate?: string;\n  }): Promise<string> {\n    const response: AxiosResponse<string> = await this.api.get('/admin/audit/export', {\n      params: { format, ...filters },\n      responseType: 'text',\n    });\n    return response.data;\n  }\n}\n\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}