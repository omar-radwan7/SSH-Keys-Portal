{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: '/api/v1',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        var _error$config;\n        // Only auto-logout for authentication-related endpoints\n        // Don't logout for admin operations that might have temporary 401s\n        const url = ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url) || '';\n        const isAuthEndpoint = url.includes('/auth/') || url.includes('/login') || url.includes('/logout');\n        if (isAuthEndpoint) {\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        // For admin operations, let the component handle the error without auto-logout\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentication\n  async login(username, password) {\n    // Try regular login first for real user accounts\n    try {\n      const response = await this.api.post('/auth/login', {\n        username,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      // If regular login fails and it's admin/admin, try test-login as fallback\n      if (username === 'admin' && password === 'admin' && ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        try {\n          const testResponse = await this.api.post('/auth/test-login', {\n            username,\n            password\n          });\n          return testResponse.data;\n        } catch (testError) {\n          // If both fail, return the original error\n          throw error;\n        }\n      }\n      // For all other cases, throw the original error\n      throw error;\n    }\n  }\n  async logout() {\n    const response = await this.api.post('/auth/logout');\n    return response.data;\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register', {\n      username: userData.username,\n      password: userData.password,\n      email: userData.email && userData.email.trim() !== '' ? userData.email : undefined,\n      displayName: userData.displayName\n    });\n    return response.data;\n  }\n  async updateMyUsername(newUsername, currentPassword) {\n    const response = await this.api.put('/auth/change-username', {\n      newUsername,\n      currentPassword\n    });\n    return response.data;\n  }\n  async updateMyPassword(currentPassword, newPassword) {\n    const response = await this.api.put('/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n    return response.data;\n  }\n\n  // SSH Keys\n  async getMyKeys() {\n    const response = await this.api.get('/me/keys');\n    return response.data;\n  }\n  async previewKey(publicKey) {\n    const response = await this.api.post('/me/keys/preview', {\n      publicKey\n    });\n    return response.data;\n  }\n  async importKey(publicKey, comment, expiresAt, authorizedKeysOptions) {\n    const response = await this.api.post('/me/keys', {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions\n    });\n    return response.data;\n  }\n  async generateKey(algorithm, bitLength) {\n    const response = await this.api.post('/me/keys/generate', {\n      algorithm,\n      bitLength\n    });\n    return response.data;\n  }\n  async revokeKey(keyId) {\n    const response = await this.api.delete(`/me/keys/${keyId}`);\n    return response.data;\n  }\n  async rotateKey(keyId, publicKey, comment, expiresAt, authorizedKeysOptions) {\n    const response = await this.api.post(`/me/keys/${keyId}/rotate`, {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions\n    });\n    return response.data;\n  }\n  async getKeyStatus() {\n    const response = await this.api.get('/me/keys/status');\n    return response.data;\n  }\n\n  // Admin - Policies\n  async getCurrentPolicy() {\n    const response = await this.api.get('/admin/policies/current');\n    return response.data;\n  }\n  async updatePolicy(policy) {\n    const response = await this.api.put('/admin/policies/ssh', policy);\n    return response.data;\n  }\n\n  // Admin - Managed Hosts\n  async getManagedHosts() {\n    const response = await this.api.get('/admin/hosts');\n    return response.data;\n  }\n  async addManagedHost(hostname, address, osFamily) {\n    const response = await this.api.post('/admin/hosts', {\n      hostname,\n      address,\n      os_family: osFamily\n    });\n    return response.data;\n  }\n\n  // Admin - Audit\n  async searchAuditEvents(filters) {\n    const response = await this.api.get('/admin/audit', {\n      params: filters\n    });\n    return response.data;\n  }\n  async exportAuditEvents(format, filters) {\n    const response = await this.api.get('/admin/audit/export', {\n      params: {\n        format,\n        ...filters\n      },\n      responseType: 'text'\n    });\n    return response.data;\n  }\n\n  // Admin - Apply\n  async queueApplyAll() {\n    const response = await this.api.post('/admin/apply');\n    return response.data;\n  }\n  async queueApplyForUser(userId) {\n    const response = await this.api.post(`/admin/apply/user/${userId}`);\n    return response.data;\n  }\n\n  // Admin - Emergency Controls\n  async emergencyRevokeByFingerprint(fingerprint) {\n    const response = await this.api.post('/admin/revoke/fingerprint', null, {\n      params: {\n        fingerprint\n      }\n    });\n    return response.data;\n  }\n\n  // Admin - Metrics and Monitoring\n  async getAdminMetrics() {\n    const response = await this.api.get('/admin/metrics');\n    return response.data;\n  }\n  async getDeployments(status, hostId, limit) {\n    const response = await this.api.get('/admin/deployments', {\n      params: {\n        status,\n        host_id: hostId,\n        limit\n      }\n    });\n    return response.data;\n  }\n\n  // Admin - User Management\n  async getUsers() {\n    const response = await this.api.get('/admin/users');\n    return response.data;\n  }\n  async adminUpdateUsername(userId, newUsername) {\n    const response = await this.api.put(`/admin/users/${userId}/username`, {\n      new_username: newUsername\n    });\n    return response.data;\n  }\n  async adminResetPassword(userId, newPassword) {\n    const response = await this.api.put(`/admin/users/${userId}/password`, {\n      new_password: newPassword\n    });\n    return response.data;\n  }\n  async updateUserRole(userId, role) {\n    const response = await this.api.put(`/admin/users/${userId}/role`, {\n      role\n    });\n    return response.data;\n  }\n  async updateUserStatus(userId, status) {\n    const response = await this.api.put(`/admin/users/${userId}/status`, {\n      status\n    });\n    return response.data;\n  }\n\n  // Admin - User-Host Account Mapping\n  async getUserHostAccounts() {\n    const response = await this.api.get('/admin/user-host-accounts');\n    return response.data;\n  }\n  async createUserHostAccount(userId, hostId, remoteUsername, status) {\n    const response = await this.api.post('/admin/user-host-accounts', {\n      user_id: userId,\n      host_id: hostId,\n      remote_username: remoteUsername,\n      status: status || 'active'\n    });\n    return response.data;\n  }\n\n  // Legacy endpoint for backward compatibility\n  async applyAuthorizedKeys(username) {\n    const response = await this.api.post(`/admin/apply-legacy`, null, {\n      params: {\n        username\n      }\n    });\n    return response.data;\n  }\n\n  // Admin User Management\n  async createUser(userData) {\n    const endpoint = userData.role === 'admin' ? '/admin/create-admin' : '/admin/create-user';\n    const response = await this.api.post(endpoint, {\n      username: userData.username,\n      password: userData.password,\n      email: userData.email,\n      display_name: userData.displayName\n    });\n    return response.data;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","_error$config","url","isAuthEndpoint","includes","removeItem","window","location","href","Promise","reject","login","username","password","post","data","_error$response2","testResponse","testError","logout","register","userData","email","trim","undefined","displayName","updateMyUsername","newUsername","currentPassword","put","updateMyPassword","newPassword","getMyKeys","get","previewKey","publicKey","importKey","comment","expiresAt","authorizedKeysOptions","generateKey","algorithm","bitLength","revokeKey","keyId","delete","rotateKey","getKeyStatus","getCurrentPolicy","updatePolicy","policy","getManagedHosts","addManagedHost","hostname","address","osFamily","os_family","searchAuditEvents","filters","params","exportAuditEvents","format","responseType","queueApplyAll","queueApplyForUser","userId","emergencyRevokeByFingerprint","fingerprint","getAdminMetrics","getDeployments","hostId","limit","host_id","getUsers","adminUpdateUsername","new_username","adminResetPassword","new_password","updateUserRole","role","updateUserStatus","getUserHostAccounts","createUserHostAccount","remoteUsername","user_id","remote_username","applyAuthorizedKeys","createUser","endpoint","display_name"],"sources":["/home/oradwan/Desktop/SSH keys portal/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { ApiResponse, User, SSHKey, PolicyRules, AuditEvent, ManagedHost, KeyPreview } from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: '/api/v1',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Only auto-logout for authentication-related endpoints\n          // Don't logout for admin operations that might have temporary 401s\n          const url = error.config?.url || '';\n          const isAuthEndpoint = url.includes('/auth/') || url.includes('/login') || url.includes('/logout');\n          \n          if (isAuthEndpoint) {\n            localStorage.removeItem('auth_token');\n            localStorage.removeItem('user');\n            window.location.href = '/login';\n          }\n          // For admin operations, let the component handle the error without auto-logout\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async login(username: string, password: string): Promise<ApiResponse<{ token: string; user: User }>> {\n    // Try regular login first for real user accounts\n    try {\n      const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.post('/auth/login', {\n        username,\n        password,\n      });\n      return response.data;\n    } catch (error: any) {\n      // If regular login fails and it's admin/admin, try test-login as fallback\n      if (username === 'admin' && password === 'admin' && error.response?.status === 401) {\n        try {\n          const testResponse: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.post('/auth/test-login', {\n            username,\n            password,\n          });\n          return testResponse.data;\n        } catch (testError) {\n          // If both fail, return the original error\n          throw error;\n        }\n      }\n      // For all other cases, throw the original error\n      throw error;\n    }\n  }\n\n  async logout(): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.post('/auth/logout');\n    return response.data;\n  }\n\n  async register(userData: {\n    username: string;\n    password: string;\n    email?: string;\n    displayName: string;\n  }): Promise<ApiResponse<{ token: string; user: User }>> {\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.post('/auth/register', {\n      username: userData.username,\n      password: userData.password,\n      email: userData.email && userData.email.trim() !== '' ? userData.email : undefined,\n      displayName: userData.displayName,\n    });\n    return response.data;\n  }\n\n  async updateMyUsername(newUsername: string, currentPassword: string): Promise<ApiResponse<{ token: string; user: User }>> {\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = await this.api.put('/auth/change-username', {\n      newUsername,\n      currentPassword,\n    });\n    return response.data;\n  }\n\n  async updateMyPassword(currentPassword: string, newPassword: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put('/auth/change-password', {\n      currentPassword,\n      newPassword,\n    });\n    return response.data;\n  }\n\n  // SSH Keys\n  async getMyKeys(): Promise<ApiResponse<SSHKey[]>> {\n    const response: AxiosResponse<ApiResponse<SSHKey[]>> = await this.api.get('/me/keys');\n    return response.data;\n  }\n\n  async previewKey(publicKey: string): Promise<ApiResponse<KeyPreview>> {\n    const response: AxiosResponse<ApiResponse<KeyPreview>> = await this.api.post('/me/keys/preview', {\n      publicKey,\n    });\n    return response.data;\n  }\n\n  async importKey(\n    publicKey: string,\n    comment?: string,\n    expiresAt?: string,\n    authorizedKeysOptions?: string\n  ): Promise<ApiResponse<SSHKey>> {\n    const response: AxiosResponse<ApiResponse<SSHKey>> = await this.api.post('/me/keys', {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions,\n    });\n    return response.data;\n  }\n\n  async generateKey(algorithm: string, bitLength: number): Promise<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> {\n    const response: AxiosResponse<ApiResponse<{ requestId: string; downloadUrl: string; expiresIn: string }>> = await this.api.post('/me/keys/generate', {\n      algorithm,\n      bitLength,\n    });\n    return response.data;\n  }\n\n  async revokeKey(keyId: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.delete(`/me/keys/${keyId}`);\n    return response.data;\n  }\n\n  async rotateKey(\n    keyId: string,\n    publicKey: string,\n    comment?: string,\n    expiresAt?: string,\n    authorizedKeysOptions?: string\n  ): Promise<ApiResponse<SSHKey>> {\n    const response: AxiosResponse<ApiResponse<SSHKey>> = await this.api.post(`/me/keys/${keyId}/rotate`, {\n      publicKey,\n      comment,\n      expiresAt,\n      authorizedKeysOptions,\n    });\n    return response.data;\n  }\n\n  async getKeyStatus(): Promise<ApiResponse<{\n    host_accounts: any[];\n    keys: any[];\n    summary: any;\n  }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.get('/me/keys/status');\n    return response.data;\n  }\n\n  // Admin - Policies\n  async getCurrentPolicy(): Promise<ApiResponse<PolicyRules>> {\n    const response: AxiosResponse<ApiResponse<PolicyRules>> = await this.api.get('/admin/policies/current');\n    return response.data;\n  }\n\n  async updatePolicy(policy: PolicyRules): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put('/admin/policies/ssh', policy);\n    return response.data;\n  }\n\n  // Admin - Managed Hosts\n  async getManagedHosts(): Promise<ApiResponse<ManagedHost[]>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost[]>> = await this.api.get('/admin/hosts');\n    return response.data;\n  }\n\n  async addManagedHost(hostname: string, address: string, osFamily: string): Promise<ApiResponse<ManagedHost>> {\n    const response: AxiosResponse<ApiResponse<ManagedHost>> = await this.api.post('/admin/hosts', {\n      hostname,\n      address,\n      os_family: osFamily,\n    });\n    return response.data;\n  }\n\n  // Admin - Audit\n  async searchAuditEvents(filters: {\n    startDate?: string;\n    endDate?: string;\n    action?: string;\n    entity?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<ApiResponse<AuditEvent[]>> {\n    const response: AxiosResponse<ApiResponse<AuditEvent[]>> = await this.api.get('/admin/audit', {\n      params: filters,\n    });\n    return response.data;\n  }\n\n  async exportAuditEvents(format: 'csv' | 'json', filters: {\n    startDate?: string;\n    endDate?: string;\n  }): Promise<string> {\n    const response: AxiosResponse<string> = await this.api.get('/admin/audit/export', {\n      params: { format, ...filters },\n      responseType: 'text',\n    });\n    return response.data;\n  }\n\n  // Admin - Apply\n  async queueApplyAll(): Promise<ApiResponse<{ queued_operations: number }>> {\n    const response: AxiosResponse<ApiResponse<{ queued_operations: number }>> = await this.api.post('/admin/apply');\n    return response.data;\n  }\n\n  async queueApplyForUser(userId: string): Promise<ApiResponse<{ queued_operations: number; user_id: string }>> {\n    const response: AxiosResponse<ApiResponse<{ queued_operations: number; user_id: string }>> = await this.api.post(`/admin/apply/user/${userId}`);\n    return response.data;\n  }\n\n  // Admin - Emergency Controls\n  async emergencyRevokeByFingerprint(fingerprint: string): Promise<ApiResponse<{ fingerprint: string; revoked_count: number; affected_users: number }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.post('/admin/revoke/fingerprint', null, {\n      params: { fingerprint },\n    });\n    return response.data;\n  }\n\n  // Admin - Metrics and Monitoring\n  async getAdminMetrics(): Promise<ApiResponse<any>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.get('/admin/metrics');\n    return response.data;\n  }\n\n  async getDeployments(status?: string, hostId?: string, limit?: number): Promise<ApiResponse<{ deployments: any[] }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.get('/admin/deployments', {\n      params: { status, host_id: hostId, limit },\n    });\n    return response.data;\n  }\n\n  // Admin - User Management\n  async getUsers(): Promise<ApiResponse<{ users: any[] }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.get('/admin/users');\n    return response.data;\n  }\n\n  async adminUpdateUsername(userId: string, newUsername: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put(`/admin/users/${userId}/username`, {\n      new_username: newUsername,\n    });\n    return response.data;\n  }\n\n  async adminResetPassword(userId: string, newPassword: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put(`/admin/users/${userId}/password`, {\n      new_password: newPassword,\n    });\n    return response.data;\n  }\n\n  async updateUserRole(userId: string, role: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put(`/admin/users/${userId}/role`, { role });\n    return response.data;\n  }\n\n  async updateUserStatus(userId: string, status: string): Promise<ApiResponse> {\n    const response: AxiosResponse<ApiResponse> = await this.api.put(`/admin/users/${userId}/status`, { status });\n    return response.data;\n  }\n\n  // Admin - User-Host Account Mapping\n  async getUserHostAccounts(): Promise<ApiResponse<{ accounts: any[] }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.get('/admin/user-host-accounts');\n    return response.data;\n  }\n\n  async createUserHostAccount(userId: string, hostId: string, remoteUsername: string, status?: string): Promise<ApiResponse<{ account: any }>> {\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.post('/admin/user-host-accounts', {\n      user_id: userId,\n      host_id: hostId,\n      remote_username: remoteUsername,\n      status: status || 'active',\n    });\n    return response.data;\n  }\n\n  // Legacy endpoint for backward compatibility\n  async applyAuthorizedKeys(username: string): Promise<ApiResponse<{ applied: any[]; checksum: string }>> {\n    const response: AxiosResponse<ApiResponse<{ applied: any[]; checksum: string }>> = await this.api.post(`/admin/apply-legacy`, null, {\n      params: { username },\n    });\n    return response.data;\n  }\n\n  // Admin User Management\n  async createUser(userData: {\n    username: string;\n    password: string;\n    email?: string;\n    displayName: string;\n    role: 'user' | 'admin';\n  }): Promise<ApiResponse<{ user: User }>> {\n    const endpoint = userData.role === 'admin' ? '/admin/create-admin' : '/admin/create-user';\n    const response: AxiosResponse<ApiResponse<any>> = await this.api.post(endpoint, {\n      username: userData.username,\n      password: userData.password,\n      email: userData.email,\n      display_name: userData.displayName,\n    });\n    return response.data;\n  }\n}\n\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}